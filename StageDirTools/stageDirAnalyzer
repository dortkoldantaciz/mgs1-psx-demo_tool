"""
This is a testing script for developing a tool for working with STAGE.DIR
"""

import os, re, glob, struct

extTable = { # From jayveer's REX utility: https://github.com/Jayveer/Rex/blob/master/mgs/common/ext_table.h
    0x62: "bin",
    0x63: "con",
    0x64: "dar",
    0x65: "efx",
    0x67: "gcx",
    0x68: "hzm",
    0x69: "img",
    0x6B: "kmd",
    0x6C: "lit",
    0x6D: "mdx",
    0x6F: "oar",
    0x70: "pcx",
    0x72: "rar",
    0x73: "sgt",
    0x77: "wvx",
    0x7A: "zmd",
    0xFF: "noFile"
}

# First thing is to figure out a working Table of Contents, then we can work at making and splitting directories.

filename = 'build/MGS/STAGE.DIR'
stageData = open(filename, 'rb').read()
"""
class tableContents:
    size = struct.unpack("I", stageData[0:4])[0]

"""

size = struct.unpack("I", stageData[0:4])[0]
tableOfConts = {}

print(size)

offset = 4
while offset < size:
    stage = stageData[offset:offset + 8].decode('utf8').rstrip('\x00')
    location = struct.unpack("I", stageData[offset + 8: offset + 12])[0]
    locationEnd = struct.unpack("I", stageData[offset + 20: offset + 24])[0]
    if locationEnd == 0:
        locationEnd = len(stageData) // 0x800
    tableOfConts.update({stage: (location, locationEnd)})
    offset += 12

for key in tableOfConts.keys():
    print(f'{key}: {tableOfConts.get(key)}')

# Next we read the table of contents:

"""
STAGE.DIR:

  000h 4     Size of File List (N*0Ch)
  004h N*0Ch Folder List
  ...  ..    Zeropadding to 800h-byte boundary
  ...  ..    Folder Data
 Folder List entries:
  000h 8     Foldername (zeropadded if less than 8 chars)  ;nickname=stg
  008h 4     Offset/800h to File List
 Folder Data (per folder):
  000h 2     Unknown (always 1) (maybe File List size/800h?)
  002h 2     Folder Size/800h (of whole folder, with file list plus file data)
  004h N*8   File List
  ...        Zeropadding to 800h-byte
  800h       Data (for files in current folder)
 File List entries:
  000h 2     File ID (checksum on name)
  002h 1     File Family (one of following chars: "cnrs")
  003h 1     File Type   (one of following chars: "abcdeghiklmoprswz",FFh)
  004h 4     File Size (or File Offset, when File Family="c")


Source: https://problemkaputt.de/psxspx-cdrom-file-archive-stage-dir-and-dat-metal-gear-solid.htm
"""

"""
For hashed filenames we can grab them from this collection, props to netcat:
https://raw.githubusercontent.com/KieronJ/restage/refs/heads/main/dict.txt

"""

# For now we'll hard code the brf folder.
a, b = tableOfConts.get('brf')
folderData = stageData[a * 0x800: b * 0x800]

listSize = struct.unpack('H', folderData[0:2])
numBlocks = struct.unpack('H', folderData[2:4])

"""
Next: Write a def that pulls the table of contents and lists the files and their sizes. 

"""

class stageFile:
    nameChecksum: bytes
    fileFamily: int
    fileType: int
    offset: int
    startBlock: int # This is the block where the file starts, where each block is 0x800 and first block is TOC
    size: bytes

    """def __init__(self, data: bytes):
        self.nameChecksum = data[0:2]
        self.fileType = data[2:4]
        pass"""

class stageContents:
    dataStart: int
    dataEnd: int
    files = []

fileListBin = folderData[0:0x800]
offset = 4

cFiles: list [ stageFile ]
i = 0

while offset < len(fileListBin):
    currentFile: stageFile
    # We can loop to see which type of file we hit and add it. 
    if fileListBin[offset : offset + 8] == bytes(8):
        print(f'Reached end of list! Breaking...')
        break
    elif fileListBin[offset + 3] == 0x63:
        cFiles.append(fileListBin[offset : offset + 8])
    else:  
        stageFile.nameChecksum = fileListBin[offset: offset + 2][::-1].hex()
        stageFile.fileFamily = fileListBin[offset + 2]
        stageFile.fileType = fileListBin[offset + 3]
        print(stageFile.fileType)
        stageFile.size = struct.unpack("I", fileListBin[offset + 4: offset + 8])[0]
        fileBlocks = stageFile.size // 0x800 + 1
        print(f'File: {stageFile.nameChecksum}.{extTable.get(stageFile.fileType)}, offset: {offset}')
    
    cFiles.append(stageFile)
    offset += 8


"""
Next step: Write block and file size calcs. 
Then: The file exports on a per-stage basis.
"""
